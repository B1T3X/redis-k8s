---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cluster
data:
  # Creates update-node.sh script to update the nodes configuration file
  update-node.sh: |
    #!/bin/sh
    REDIS_NODES="/data/nodes.conf"
    sed -i -e "/myself/ s/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/${POD_IP}/" ${REDIS_NODES}
    exec "$@"
  # Creates the redis configuration file (password and debug logging are implemented here)
  redis.conf: |
    cluster-enabled yes
    cluster-require-full-coverage no
    cluster-node-timeout 2000
    cluster-config-file /data/nodes.conf
    cluster-migration-barrier 1
    appendonly yes
    protected-mode no
    requirepass NXYdun&KYKzxVMCm&LPUPKtw5wJFu@kmpDKUF3X%zmX6EZtPaChk#L#6E3&hnGY%
    loglevel debug
---
apiVersion: apps/v1
kind: StatefulSet
# Creating stateful set instead of deployment as redis is stateful
metadata:
  name: redis-cluster
spec:
  serviceName: redis-cluster
  replicas: 6
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
    spec:
      containers:
      - name: redis
        image: redis
        ports:
        - containerPort: 6379
          name: client
        - containerPort: 16379
          name: gossip
        # Run the update-node.sh script and pass variable to it
        # (will result in executing "update-node.sh" and "redis-server /conf/redis.conf")
        command: ["/conf/update-node.sh", "redis-server", "/conf/redis.conf"]
        env:
        # Set POD_IP envvar for use in the update-node.sh script
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: conf
          mountPath: /conf
          readOnly: false
        - name: data
          mountPath: /data
          readOnly: false
      volumes:
      # Mount ConfigMap to /conf
      - name: conf
        configMap:
          name: redis-cluster
          defaultMode: 0755
  volumeClaimTemplates:
  # Request dynamic volume creation for /data
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      # To see available storage classes for your provider run "kubectl get sc"
      storageClassName: "default"
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
# Expose cluster to the network
kind: Service
metadata:
  name: redis-cluster
spec:
  clusterIP: None
  ports:
  - port: 6379
    targetPort: 6379
    name: client
  # Gossip is used for in-cluster comms
  - port: 16379
    targetPort: 16379
    name: gossip
  selector:
    app: redis-cluster
